openapi: 3.0.3
info:
  title: Fi-Zen User Data API
  description: User management and data persistence APIs
  version: 1.0.0
  contact:
    name: Fi-Zen Backend Team
    email: backend@fi.money

servers:
  - url: https://api.fi.money/v1/user
    description: Production server
  - url: https://staging-api.fi.money/v1/user
    description: Staging server

paths:
  /profile:
    get:
      summary: Get User Profile
      description: Retrieve user profile and preferences
      tags:
        - User Management
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: "fi_user_123456"
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "fi_user_123456"
                      profile:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Arjun Sharma"
                          email:
                            type: string
                            example: "arjun@example.com"
                          phone:
                            type: string
                            example: "+919876543210"
                          location:
                            type: object
                            properties:
                              city:
                                type: string
                                example: "Mumbai"
                              state:
                                type: string
                                example: "Maharashtra"
                              pincode:
                                type: string
                                example: "400001"
                          professional:
                            type: object
                            properties:
                              industry:
                                type: string
                                example: "Software Engineering"
                              experience:
                                type: string
                                example: "5-8 years"
                              salary:
                                type: number
                                example: 1200000
                              workMode:
                                type: string
                                enum: [office, wfh, hybrid]
                                example: "wfh"
                      preferences:
                        type: object
                        properties:
                          language:
                            type: string
                            enum: [english, hindi, kannada]
                            example: "english"
                          currency:
                            type: string
                            example: "INR"
                          notifications:
                            type: object
                            properties:
                              monthlyUpdates:
                                type: boolean
                                example: true
                              inflationAlerts:
                                type: boolean
                                example: true
                              professionalInsights:
                                type: boolean
                                example: true

    put:
      summary: Update User Profile
      description: Update user profile and preferences
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: "fi_user_123456"
                profile:
                  type: object
                  properties:
                    location:
                      type: object
                      properties:
                        city:
                          type: string
                          example: "Mumbai"
                        state:
                          type: string
                          example: "Maharashtra"
                    professional:
                      type: object
                      properties:
                        industry:
                          type: string
                          example: "Software Engineering"
                        experience:
                          type: string
                          example: "5-8 years"
                        salary:
                          type: number
                          example: 1200000
                preferences:
                  type: object
                  properties:
                    language:
                      type: string
                      enum: [english, hindi, kannada]
                      example: "english"
                    notifications:
                      type: object
                      properties:
                        monthlyUpdates:
                          type: boolean
                          example: true
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"

  /spending-data:
    post:
      summary: Save Spending Data
      description: Store user's spending data for inflation calculation
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - spendingData
                - period
              properties:
                userId:
                  type: string
                  example: "fi_user_123456"
                spendingData:
                  type: object
                  properties:
                    housing:
                      type: number
                      example: 45000
                    food:
                      type: number
                      example: 28000
                    transport:
                      type: number
                      example: 15000
                    healthcare:
                      type: number
                      example: 8000
                    education:
                      type: number
                      example: 12000
                    entertainment:
                      type: number
                      example: 10000
                    others:
                      type: number
                      example: 7000
                period:
                  type: object
                  properties:
                    month:
                      type: number
                      example: 7
                    year:
                      type: number
                      example: 2024
                dataSource:
                  type: string
                  enum: [manual, fi_account, bank_integration]
                  example: "fi_account"
      responses:
        '201':
          description: Spending data saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      recordId:
                        type: string
                        example: "spending_record_789"
                      savedAt:
                        type: string
                        format: date-time
                        example: "2024-07-20T09:00:00Z"

    get:
      summary: Get Spending History
      description: Retrieve user's spending data history
      tags:
        - Data Management
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: "fi_user_123456"
        - name: months
          in: query
          required: false
          schema:
            type: number
            default: 6
          example: 6
        - name: category
          in: query
          required: false
          schema:
            type: string
          example: "housing"
      responses:
        '200':
          description: Spending history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "fi_user_123456"
                      spendingHistory:
                        type: array
                        items:
                          type: object
                          properties:
                            period:
                              type: object
                              properties:
                                month:
                                  type: number
                                  example: 7
                                year:
                                  type: number
                                  example: 2024
                            spendingData:
                              type: object
                              properties:
                                housing:
                                  type: number
                                  example: 45000
                                food:
                                  type: number
                                  example: 28000
                                transport:
                                  type: number
                                  example: 15000
                            totalSpending:
                              type: number
                              example: 125000
                            inflationRate:
                              type: number
                              example: 11.8
                      summary:
                        type: object
                        properties:
                          averageMonthlySpending:
                            type: number
                            example: 125000
                          averageInflationRate:
                            type: number
                            example: 11.2
                          trend:
                            type: string
                            enum: [increasing, decreasing, stable]
                            example: "increasing"

  /calculations/history:
    get:
      summary: Get Calculation History
      description: Retrieve user's inflation calculation history
      tags:
        - Data Management
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: "fi_user_123456"
        - name: limit
          in: query
          required: false
          schema:
            type: number
            default: 10
          example: 10
      responses:
        '200':
          description: Calculation history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      calculations:
                        type: array
                        items:
                          type: object
                          properties:
                            calculationId:
                              type: string
                              example: "calc_456789"
                            personalInflationRate:
                              type: number
                              example: 11.8
                            governmentInflationRate:
                              type: number
                              example: 6.5
                            calculatedAt:
                              type: string
                              format: date-time
                              example: "2024-07-20T09:00:00Z"
                            location:
                              type: object
                              properties:
                                city:
                                  type: string
                                  example: "Mumbai"
                            confidence:
                              type: number
                              example: 85

  /data/export:
    get:
      summary: Export User Data
      description: Export all user data for GDPR compliance
      tags:
        - Data Management
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: "fi_user_123456"
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
          example: "json"
      responses:
        '200':
          description: User data exported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      exportId:
                        type: string
                        example: "export_123456"
                      downloadUrl:
                        type: string
                        example: "https://api.fi.money/exports/user_data_123456.json"
                      expiresAt:
                        type: string
                        format: date-time
                        example: "2024-07-27T09:00:00Z"

  /data/delete:
    delete:
      summary: Delete User Data
      description: Delete all user data for GDPR compliance
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - confirmationToken
              properties:
                userId:
                  type: string
                  example: "fi_user_123456"
                confirmationToken:
                  type: string
                  description: Token sent via email for confirmation
                  example: "delete_confirm_789"
                deleteType:
                  type: string
                  enum: [inflation_data_only, all_data]
                  default: inflation_data_only
                  example: "inflation_data_only"
      responses:
        '200':
          description: User data deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Inflation data deleted successfully"
                  deletedAt:
                    type: string
                    format: date-time
                    example: "2024-07-20T09:00:00Z"

components:
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "INVALID_REQUEST"
            message:
              type: string
              example: "Invalid user data provided"

  securitySchemes:
    FiAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Fi user authentication token

security:
  - FiAuth: []
